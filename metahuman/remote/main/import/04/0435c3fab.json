[1,["1brw/JvvpFnIvdrxpFCgMZ","3f3638Dv1E1K9i0obeKBno@f9941","65gqQSNgZHXK08ncW2u3mY@f9941","7887tY325GP6CPZKQLvKxE@f9941","17HJ1BBS9HZ6ieC0dsRqKh@e782f","5a8gG1WVFOLKgfrEqtkTLL@b47c0","e079+wNYhMgJ0Gspy/aGy4","95EuJ2MkpDHLUhfa5y9Ocn","15AnXzOZtA5pB22pvE4avC@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","3f3638Dv1E1K9i0obeKBno@6c48a","8eNpYdaQhDrbGTwWl6WypC@afeef","8eNpYdaQhDrbGTwWl6WypC@b5e6e","65gqQSNgZHXK08ncW2u3mY@6c48a","8eNpYdaQhDrbGTwWl6WypC@c47df","8eNpYdaQhDrbGTwWl6WypC@b7107","7887tY325GP6CPZKQLvKxE@6c48a","15AnXzOZtA5pB22pvE4avC@f9941","9c1FeqoG1J761ZCwl1Lv+B@f9941","8eNpYdaQhDrbGTwWl6WypC@53dc5","c4ZtmZNNhGabdwvrGriy5G@b7bbc","04JyFTbbxE8L8ed7kKTcpP@1822e","a2YALeFnZKV7JEZvcmvM/1@9e9cb","ebwHV16XlF8oILjlK6ae/O","12Y9dMgWdJKJGmTiZyQR9H@2e76e","20g1ukYUVPvKWKBRznAKo+@f9941","83U0cpnX5JwYY54dgosNvX@f9941","83U0cpnX5JwYY54dgosNvX@6c48a","8eNpYdaQhDrbGTwWl6WypC@37b83","8eNpYdaQhDrbGTwWl6WypC@30732","8eNpYdaQhDrbGTwWl6WypC@9635c","8eNpYdaQhDrbGTwWl6WypC@f1394","8eNpYdaQhDrbGTwWl6WypC@b6359","8eNpYdaQhDrbGTwWl6WypC@75ee4","905JlLTopKzo3kzhh4QZ4+","8eNpYdaQhDrbGTwWl6WypC@8f0a6","8eNpYdaQhDrbGTwWl6WypC@a72ab","d8FJzbWlVOZ7NiFtjM84Zd","8eNpYdaQhDrbGTwWl6WypC@a4f4d","8eNpYdaQhDrbGTwWl6WypC@2224c","735RI6RZlPKKI+KntCJgvg","8eNpYdaQhDrbGTwWl6WypC@fba9c","8eNpYdaQhDrbGTwWl6WypC@62756","d24iMMxB1P5qduZ6if8wCr","8eNpYdaQhDrbGTwWl6WypC@0b9c0","8eNpYdaQhDrbGTwWl6WypC@7d08b","45e7Y4tnNDRpkfRdjrbcvP","8eNpYdaQhDrbGTwWl6WypC@e4a32","8eNpYdaQhDrbGTwWl6WypC@b5902","fb+guFh1JICaDoDzE9VMPY","8eNpYdaQhDrbGTwWl6WypC@910b4","8eNpYdaQhDrbGTwWl6WypC@2d5df","8eNpYdaQhDrbGTwWl6WypC@97b5c","8eNpYdaQhDrbGTwWl6WypC@c1cb9","8eNpYdaQhDrbGTwWl6WypC@05da8","8eNpYdaQhDrbGTwWl6WypC@7b4fa","9c1FeqoG1J761ZCwl1Lv+B@6c48a","8eNpYdaQhDrbGTwWl6WypC@23673","8eNpYdaQhDrbGTwWl6WypC@b4801","8eNpYdaQhDrbGTwWl6WypC@9e7e2","8eNpYdaQhDrbGTwWl6WypC@0a1ef","21p/9Eu0BLLqCVkHkLHMfi@6c48a","8eNpYdaQhDrbGTwWl6WypC@dcebe"],["node","_parent","_mesh","mainTexture","_effectAsset","_skeleton","_textureSource","normalMap","_spriteFrame","value","targetInfo","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","root","_cameraComponent","helloBtn","danceBtn","tipsLabel","recBtn","scene","asset","_envmapHDR","_envmapLDR","data"],[["cc.Node",["_name","_layer","_id","_objFlags","__editorExtras__","_parent","_lpos","_components","_prefab","_lrot","_euler","_children","_lscale"],-2,1,5,9,4,5,5,2,5],"cc.SpriteFrame","cc.ImageAsset",["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_overflow","_enableWrapText","_isBold","_cacheMode","_horizontalAlign","node","_color"],-6,1,5],["cc.Node",["_name","_lpos","_parent","_children","_prefab","_lrot","_euler","_lscale","_components"],2,5,1,9,4,5,5,5,2],["cc.Widget",["_alignFlags","_right","_top","_left","_bottom","_originalWidth","_originalHeight","node"],-4,1],["cc.Node",["_name","_layer","_parent","_components","_children","_lpos"],1,1,12,2,5],["cc.PrefabInfo",["targetOverrides","fileId","nestedPrefabInstanceRoots","root","instance","asset"],1,2,1,4,6],["cc.Camera",["_clearFlags","_visibility","_projection","_priority","_orthoHeight","_far","node","_color"],-3,1,5],"cc.TextureCube",["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_states","_defines","_props"],1,12],["cc.SceneAsset",["_name"],2],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Sprite",["_sizeMode","node","_spriteFrame"],2,1,6],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.TargetInfo",["localID"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_enabled","_type","_distance","_shadowColor"],0,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["dc937/4HXtE34qxHjnSn1cM",["node","danceBtn","helloBtn"],3,1,1,1],["cc.PrefabInstance",["fileId","mountedComponents","propertyOverrides"],2,9,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cb004DiqE5H/q7xuD14+5+S",["node"],3,1],["659bargVSpB3p590jrX9tBB",[],3],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","_shadowEnabled","_shadowPcf","_shadowBias","_shadowSaturation","_shadowDistance","_shadowFar","_shadowOrthoSize","node","_staticSettings"],-6,1,4],["cc.StaticLightSettings",[],3],["7b3cc31ySlIi4oMBXjxSfJL",["node","recBtn","tipsLabel"],3,1,1,1],["cc.Button",["_transition","node","_normalColor","_target"],2,1,5,1],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh"],2,1,3,4,6],["cc.ModelLightmapSettings",[],3],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Prefab",[],3],["cc.SkeletalAnimation",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6]],[[19,0,1,2,2],[0,0,5,11,8,6,9,12,10,2],[14,0,1,1],[0,0,5,8,6,9,10,2],[0,0,5,11,8,6,9,10,2],[10,0,1,2,3],[39,1],[43,0,2],[12,0,1,2,3],[0,0,5,7,8,9,10,2],[40,0,1,2,3,4],[44,0,1,2,3,4,5,6,1],[4,0,2,3,4,1,5,7,6,2],[0,0,1,5,7,6,3],[4,0,2,3,4,1,5,6,2],[15,0,1,2,2],[33,0,1,2,2],[17,0,2],[31,0,1,2,3],[6,0,1,2,4,3,5,3],[32,0,1,2,2],[37,0,1,2,3,2],[0,0,1,5,11,7,6,3],[0,0,2,5,7,6,9,10,3],[0,0,11,8,6,9,12,10,2],[0,0,11,8,6,9,10,2],[0,0,5,8,6,9,12,10,2],[5,0,7,2],[28,0,1,1],[3,0,1,2,4,5,6,7,9,10,8],[11,0,1,2,4],[13,0,2],[0,0,1,11,7,6,3],[0,0,1,2,11,7,6,4],[0,3,4,5,8,3],[0,0,1,5,7,3],[0,0,2,5,7,3],[0,0,2,5,7,6,9,12,10,3],[0,0,11,7,8,2],[0,0,5,11,8,9,10,2],[6,0,1,2,3,3],[4,0,2,8,1,2],[4,0,3,4,1,5,7,6,2],[5,0,1,7,3],[5,0,2,7,3],[5,0,3,1,2,4,5,6,7,8],[16,0,1,1],[18,0,1,2,3,2],[7,0,2,2],[7,1,3,4,5,2],[20,0,1,2,3,4,1],[21,0,1,2,2],[22,0,1,2,3,4],[23,0,1,2,2],[24,0,1],[25,1],[26,0,1,2,1],[27,0,1,2,2],[29,0,1],[30,1],[3,0,1,2,3,6,9,6],[3,0,8,1,2,3,9,6],[3,0,1,2,3,9,5],[3,0,1,2,4,5,9,10,6],[3,0,1,2,3,4,9,10,6],[34,0,1,2,3,4,5,6,7,8,9,10,10],[35,1],[8,0,1,6,3],[8,2,3,4,5,0,1,6,7,7],[36,0,1,2,1],[38,0,1,2,3,4,2],[41,1],[42,0,1,1]],[[[[5,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[{"name":"top-bg","rect":{"x":2,"y":0,"width":2641,"height":1413},"offset":{"x":0.5,"y":1.5},"originalSize":{"width":2644,"height":1416},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[8]],[[[30,"builtin-standard",[{"hash":2489015834,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":2052537501,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[6],[9]],[[{"name":"dance","rect":{"x":1,"y":0,"width":619,"height":620},"offset":{"x":-1,"y":1.5},"originalSize":{"width":623,"height":623},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[10]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,7,4],[11,12,0]],[[{"base":"2,2,0,0,2,1","rgbe":false,"mipmaps":[{"front":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@e9a6d","back":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@40c10","left":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@8fd34","right":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@74afd","top":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@bb97f","bottom":"5af201b5-5951-4e2c-a81f-ac4aad9132cb@b47c0@7d38f"}]}],[9],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"name":"hi","rect":{"x":0,"y":2,"width":618,"height":620},"offset":{"x":0,"y":-0.5},"originalSize":{"width":618,"height":623},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[13]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,7,4],[14,15,0]],[[{"name":"voice-icon-normal","rect":{"x":10,"y":15,"width":297,"height":297},"offset":{"x":0,"y":-5},"originalSize":{"width":317,"height":317},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[16]],[[[31,"main"],[32,"footer-bg",33554432,[-4,-5,-6,-7],[[2,-1,[5,375,123]],[15,0,-2,3],[27,20,-3]],[1,0,-272,0]],[33,"Canvas",33554432,"feOFNNIGpKDphi+hEd5OBv",[-12,-13,1,-14],[[2,-8,[5,375,667]],[46,-10,-9],[27,45,-11]],[1,187.5,333.5,0]],[17,["b1lN/UWwBWbYGYlHMKPhVy"]],[47,"main",[-16,-17,-18,2,-19,-20],[48,[],[-15]],[50,[51,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[52,true,1,1,[4,1929379840]],[53,true,13,14],[54,[4,4292993505]],[55]]],[19,"recoder-bt",33554432,1,[-24],[[[2,-21,[5,120,120]],[15,0,-22,4],-23],4,4,1],[1,0,57.853,0]],[22,"actions",33554432,2,[-30,-31],[[2,-25,[5,50,100]],[43,34,5,-26],[56,-29,-28,-27]],[1,157.5,0,0]],[19,"dance-btn",33554432,6,[-35],[[[2,-32,[5,50,50]],[15,0,-33,1],-34],4,4,1],[1,0,30,0]],[19,"hello-btn",33554432,6,[-39],[[[2,-36,[5,50,50]],[15,0,-37,2],-38],4,4,1],[1,0,106.04,0]],[22,"top-bg",33554432,2,[-43],[[2,-40,[5,300,100]],[15,0,-41,0],[44,17,10,-42]],[1,0,273.5,0]],[40,"tips",33554432,9,[[[2,-44,[5,276,76]],-45,[45,45,12,12,12,12,456,90,-46]],4,1,4]],[34,0,null,4,[49,"47qI+bEllbX5plRO5Okfm9",-52,[57,"a2T9VROYxLgbtV8VfHp3hJ",[[28,[17,["47qI+bEllbX5plRO5Okfm9"]],[[58,-51]]],[28,[17,["afJYaSCclY8LCWXRZoEKS7"]],[[59]]]],[[18,"lss",["_name"],-47],[20,["_lpos"],-48,[1,0,0.97,0]],[20,["_lrot"],-49,[3,0,0,0,1]],[20,["_euler"],-50,[1,0,0,0]],[18,false,["_useBakedAnimation"],3],[18,4,["_clips","length"],3],[16,["_clips","0"],3,6],[16,["_defaultClip"],3,7],[16,["_clips","1"],3,8],[16,["_clips","2"],3,9],[16,["_clips","3"],3,10],[18,true,["playOnLoad"],3]]],5]],[17,["47qI+bEllbX5plRO5Okfm9"]],[13,"Label",33554432,7,[[2,-53,[5,50,20]],[29,"跳舞",12,12,1,false,true,1,-54,[4,4278190080]]],[1,0,-37.122,0]],[13,"Label",33554432,8,[[2,-55,[5,50,20]],[29,"打招呼",12,12,1,false,true,1,-56,[4,4278190080]]],[1,0,-37.122,0]],[13,"title",33554432,1,[[2,-57,[5,98,22.68]],[60,"和我一起互动吧",14,14,18,true,-58]],[1,-118.766,19.814,0]],[13,"text1",33554432,1,[[2,-59,[5,265.34,22.68]],[61,"1. 长按麦克风按钮跟我交流，可以尝试问我叫什么",0,12,12,18,-60]],[1,-33.996,-5.986,0]],[13,"text2",33554432,1,[[2,-61,[5,241.34,22.68]],[62,"2. 点击右侧按钮可以跟我互动哦，快来试试吧",12,12,18,-62]],[1,-45.052,-27.362,0]],[35,"Label",33554432,5,[[2,-63,[5,100,40]],[63,"",20,20,1,false,-64,[4,4278190080]]]],[23,"Main Light","c0y6F5f+pAvI805TdmxIjx",4,[[65,125000,3.2552083333333335,true,2,0.01,0.45098039215686275,10,50,10,-65,[66]]],[1,-0.033,6.773,5.832],[3,-0.25057753330915494,0.05962518434377914,-0.10714703248569077,0.9602995629605274],[1,-28.82,3.588,-13.631]],[23,"Main Camera","c9DMICJLFO5IeO07EPon7U",4,[[67,14,1820327937,-66]],[1,-0.006,2.332,1.881],[3,-0.01073457357473045,-0.002255609475006299,0.004444081663854139,0.9999299631945379],[1,-1.229,-0.253,0.512]],[36,"gameCtrl","0ahop3tdVNS6N+A99uHZrc",4,[[69,-69,-68,-67]]],[21,2,5,[4,4292269782],5],[41,"Camera",2,[-70],[1,0,0,1000]],[68,0,1073741824,333.5,2000,6,41943040,23,[4,4278190080]],[64,"您好呀！欢迎来到我的世界，你可以叫我“小薇”",12,12,18,1,10,[4,4282795590]],[21,2,7,[4,4292269782],7],[21,2,8,[4,4292269782],8],[37,"Background","71lfXn48dN+5RHjqWxJAJX",4,[[70,"Plane<ModelComponent>",-71,[11],[6],12]],[1,0,2.469,-5.525],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1,1,0.6],[1,90,0,0]]],0,[0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,15,0,-3,16,0,-4,17,0,0,2,0,16,24,0,0,2,0,0,2,0,-1,23,0,-2,9,0,-4,6,0,-1,11,0,-1,19,0,-2,20,0,-3,21,0,-5,11,0,-6,28,0,0,5,0,0,5,0,-3,22,0,-1,18,0,0,6,0,0,6,0,17,27,0,18,26,0,0,6,0,-1,7,0,-2,8,0,0,7,0,0,7,0,-3,26,0,-1,13,0,0,8,0,0,8,0,-3,27,0,-1,14,0,0,9,0,0,9,0,0,9,0,-1,10,0,0,10,0,-2,25,0,0,10,0,10,12,0,10,12,0,10,12,0,10,12,0,0,11,0,15,11,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,20,0,19,25,0,20,22,0,0,21,0,-1,24,0,0,28,0,21,4,1,1,2,2,1,4,71],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,27,27,27,27,22,22,22,22],[8,8,8,8,8,22,9,9,9,9,9,-1,2,23,24,11,12,13,14,11,12,13,14,11,12,13,14],[17,1,2,18,3,19,4,4,20,21,22,23,24,5,5,1,1,1,1,2,2,2,2,3,25,26,3]],[[{"name":"voice-icon-active","rect":{"x":9,"y":19,"width":299,"height":298},"offset":{"x":0,"y":-9.5},"originalSize":{"width":317,"height":317},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[27]],[[[5,".bin",3615838217,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":37152,"length":8544,"count":2136,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37152,"count":516,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,58,59,60,63,64,65]]},"minPosition",8,[1,-0.2061568647623062,-0.1512225717306137,0.0004381769977044314],"maxPosition",8,[1,0.20615951716899872,0.10342869162559509,0.17374105751514435]]],-1],0,0,[],[],[]],[[[10,"Skin-4",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,"Skin-8",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,"Skin-0",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",3606251056,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":2472,"count":618,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":120,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,7]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":11112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":12552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":13992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":15432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":16872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":18312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":19752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":21192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":22632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":24072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":25512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":26952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":28392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":29832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":31272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":32712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":34152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":35592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":37032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":38472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":39912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":41352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":42792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":44232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":45672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":47112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":48552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":49992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":51432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":52872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":54312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":55752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":57192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":58632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":60072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":61512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":62952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":64392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":65832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":67272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":68712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":70152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":71592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":73032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":74472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":75912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":77352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":78792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":80232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":81672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":83112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":84552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":85992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":87432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":88872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":90312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":91752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":93192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":94632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":96072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":97512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":98952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":100392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":101832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":103272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":104712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":106152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":107592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":109032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":110472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":111912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":113352,"length":1440,"stride":4,"count":360}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,0.012368112802505493,-0.1304795742034912,1.603359341621399],"maxPosition",8,[1,0.054967306554317474,-0.109282486140728,1.6458933353424072]]],-1],0,0,[],[],[]],[[[71],[38,"lss",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12],[[72,-2,[7,"b1lN/UWwBWbYGYlHMKPhVy"]]],[0,"47qI+bEllbX5plRO5Okfm9",-1,0]],[24,"LeftHand",[-13,-14,-15,-16,-17],[0,"f8QgFWE01bcIOmLEeYrBYv",1,0],[1,-5.960464477539063e-8,0.257375568151474,-1.4528632164001465e-7],[3,0.015977811205534424,-0.12041892959790745,-0.040060613648468676,0.9917858328175909],[1,0.9999985098838806,1.0000015497207642,1.000000238418579],[1,1.2675964099973998,-13.792611330400662,-4.77891697483403]],[24,"RightHand",[-18,-19,-20,-21,-22],[0,"46Mcy6fH5dh43TJ39YDuV0",1,0],[1,-9.685754776000977e-8,0.2573747932910919,1.3923272490501404e-7],[3,0.01597744553221524,0.12041990114054138,0.04005875323713995,0.9917857958917606],[1,0.9999988675117493,1.0000016689300537,1.0000001192092896],[1,1.267575520459542,13.79272572393509,4.778701352347387]],[25,"Hips",[-23,-24,-25],[0,"69UDvaZN1f/YOppQPsUpM7",1,0],[1,3.5090618019824327e-13,-0.040428921580314636,1.0369641780853271],[3,0.6855913314214436,-0.000019038033984628818,-0.00001792932539634694,0.727986624599563],[1,86.56425958170482,-0.0001795929369612789,-0.0029913691214230966]],[25,"Spine2",[-26,-27,-28],[0,"2fZb+qLwtberRUWks6amYh",1,0],[1,1.6653345369377348e-14,0.12162075936794281,1.7695116483196216e-8],[3,0.0635919705431609,-1.5957450818730306e-7,-9.13197248088224e-8,0.9979759823174124],[1,7.292023438373311,-0.000017583424461104906,-0.000011606125248791328]],[42,"Head",[[3,"HeadTop_End",-29,[0,"b0NdGhtzNYOLAVJTHBd5i4",1,0],[1,4.4825254619240695e-15,0.1813165247440338,-3.725290298461914e-8],[3,-0.07446511859234196,-1.048798811234165e-7,-1.1036745775671602e-8,0.9972236189105317],[1,-8.540979834862766,-0.00001207915894005791,-3.662587759819665e-7]],[3,"LeftEye",-30,[0,"4aIxd0XvJU+KJd2CU1ycs2",1,0],[1,0.03374683856964111,0.07899902015924454,0.07358887046575546],[3,-0.07016058296895707,-2.228411909213237e-9,-1.638082565661461e-8,0.9975357099359681],[1,-8.046421243068574,-3.8642665612971467e-7,-0.0000018545626108735606]],[3,"RightEye",-31,[0,"3dEMDcICldF5O46kPVkesa",1,0],[1,-0.033171795308589935,0.07894108444452286,0.07359705120325089],[3,-0.07016059779676724,-2.228411684838884e-9,-1.6380829192202573e-8,0.9975357088930703],[1,-8.046422946407983,-3.864266864741672e-7,-0.0000018545630110836049]]],[0,"19mmgXNoVfNp+4giNKUypy",1,0],[1,-6.006306563222097e-14,0.09079506993293762,-2.2351741790771484e-8],[3,-0.05336167931442279,4.289968118947751e-8,1.2695866509451468e-7,0.9985752506349868],[1,0.9999998807907104,1.000001072883606,0.9999989867210388],[1,-6.117703699106173,0.000005685263959475199,0.000014265340667895965]],[39,"Armature",1,[4],[0,"1bLLx3MLBRHrTeStURK9J1",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[4,"Spine",4,[-32],[0,"5covirWwpTTpyXYEHX0Hk0",1,0],[1,1.3633229744777764e-12,0.09636314958333969,2.2351741790771484e-8],[3,-0.013785659097655513,0.00002628866923368487,3.5865564831947113e-7,0.9999049729409394],[1,-1.579770209178837,0.003012739903984938,-4.3373659775466264e-7]],[4,"Spine1",8,[5],[0,"2cS9F1DgFZ3K8Bi4uy3NsU",1,0],[1,4.0490180652774654e-14,0.09147459268569946,-5.587935447692871e-9],[3,-0.03635692235805889,9.892730222964235e-8,9.796926324502671e-8,0.999338868550919],[1,-4.167114791767047,0.000011736898245326214,0.000010806877880495613]],[4,"Neck",5,[6],[0,"2dKVNGv/9euZ5oVW3iV200",1,0],[1,1.3100631690576847e-14,0.12444129586219788,-3.725290653733282e-8],[3,0.13964609869563996,3.9159680133278753e-8,-1.1698700376378837e-7,0.9902014780432681],[1,16.05473605690487,0.000006315456153434129,-0.00001264772332851894]],[4,"LeftShoulder",5,[-33],[0,"1eXLjv7qtRcbBubBjt0g7a",1,0],[1,0.06222335249185562,0.10491129010915756,-0.012486675754189491],[3,-0.48168733082614257,-0.4927692944579619,0.5889067572402765,-0.42230861823757593],[1,99.07390101726875,100.32966579836841,-1.2995422005403157]],[1,"LeftArm",11,[-34],[0,"b6lBJQ2+RR9IY1QUvDFlBp",1,0],[1,-1.30385160446167e-8,0.06534286588430405,2.0256265997886658e-7],[3,0.3848012155864166,0.06913686662526944,0.038287494989636225,0.9196098008850679],[1,0.9999987483024597,1.000000238418579,1.0000008344650269],[1,45.061878034408444,5.649745473144486,7.101474366240788]],[1,"LeftForeArm",12,[2],[0,"3e3MJAEoxUzoFlz/FwDwhK",1,0],[1,2.3283064365386963e-8,0.268843412399292,8.649658411741257e-8],[3,0.015386207997893296,-0.009234698511723942,0.23766262886992112,0.9711819910734968],[1,0.9999973177909851,1.000002384185791,0.9999999403953552],[1,2.213998248355575,-1.630875350506804,27.47381293269664]],[1,"LeftHandThumb1",2,[-35],[0,"c9fAFVIn5ZEZURg++LdKDL",1,0],[1,-0.016604280099272728,0.014298826456069946,0.01593310572206974],[3,0.17928495069503572,0.0030927745188335303,0.3681819851234721,0.9122989460865302],[1,1.000008225440979,0.9999915957450867,1.0000014305114746],[1,26.048695712964854,-9.836564854719251,42.29074638577721]],[1,"LeftHandThumb2",14,[-36],[0,"5fJXL1coZTPYJqQheIIPGm",1,0],[1,1.4901161193847656e-8,0.03407910838723183,-1.1641533292916506e-9],[3,0.035358037137811604,-0.018298677757618544,-0.2210380095595721,0.974452238917858],[1,0.9999914765357971,1.0000081062316895,0.9999997615814209],[1,3.866970625793165,-1.272747510746091,-25.599379189860585]],[12,"LeftHandThumb3",15,[[26,"LeftHandThumb4",-37,[0,"5aZrUrumVU0aq7bGz7rTFP",1,0],[1,-6.146728992462158e-7,0.03377935290336609,-7.264316082000732e-8],[3,-0.03271901967859495,0.029710560926436,0.04319750874051126,0.9980885349303045],[1,1.000002145767212,0.9999977946281433,1],[1,-3.9061399909886716,3.5750657184153742,4.834949689336194]]],[0,"03Hs9rcrVQQKGp6OEi6UrF",1,0],[1,-2.682209014892578e-7,0.031169090420007706,-7.450580596923828e-9],[3,0.06517290204007402,0.002604028394941585,-0.06588824717117835,0.995692950040575],[1,0.9999964237213135,1.0000033378601074,1],[1,7.542201184288092,0.7960571032627168,-7.519840400368145]],[1,"LeftHandIndex1",2,[-38],[0,"a2uO9pnmhbBa+YlHua0fmx",1,0],[1,-0.02130037359893322,0.08553458005189896,0.01461215689778328],[3,0.10182584118241648,-0.013132484682785089,0.07580868930437168,0.9918226043701075],[1,1.0000027418136597,0.9999973773956299,1.0000005960464478],[1,11.902070303402454,-2.4041982810299785,8.493840683413113]],[1,"LeftHandIndex2",17,[-39],[0,"fa7B79Z+BQAa4D51EXWeoq",1,0],[1,9.546056389808655e-9,0.032220400869846344,-8.195638656616211e-8],[3,0.17599761229861727,0.03318150293209964,-0.02511199899716316,0.9835106587295935],[1,0.9999983310699463,1.000000238418579,1.0000007152557373],[1,20.371466949253296,4.253005007624053,-2.161486398625863]],[12,"LeftHandIndex3",18,[[3,"LeftHandIndex4",-40,[0,"98herj42Ba+a3XdBFxJY46",1,0],[1,-6.05359673500061e-8,0.025588467717170715,-6.705522537231445e-8],[3,-0.06403259245519877,0.04265858271336926,-0.03069345494394529,0.9965630859348329],[1,-7.1972056063953875,4.661789511920841,-3.82096545164491]]],[0,"e5vipjhhdeg7tVfiO7gSBJ",1,0],[1,1.0989606380462646e-7,0.028316883370280266,8.707866072654724e-8],[3,0.13336032243134224,-0.04654573141958651,-0.03151512054806917,0.9894722413814673],[1,0.9999983906745911,1.000001072883606,1.0000001192092896],[1,15.171652091631024,-4.815115081050113,-4.2886611083870445]],[4,"LeftHandMiddle1",2,[-41],[0,"c59aD6VupdhqQ0aRDPPdwA",1,0],[1,-0.004846123978495598,0.08406216651201248,0.010732099413871765],[3,0.10420248096279291,-0.00026904713487961384,-0.027339727168905755,0.9941802200271175],[1,11.97499649405995,0.2962453234410911,-3.119422632344803]],[1,"LeftHandMiddle2",20,[-42],[0,"c66q6ezgdTVIga/1yRjbP+",1,0],[1,7.078051567077637e-8,0.03819414973258972,8.940696716308594e-8],[3,0.1507522021912305,0.022916318926994902,0.03965104757380274,0.9875102076878147],[1,1.0000007152557373,0.9999982714653015,1.0000003576278687],[1,17.277615104752567,1.9155735027630476,4.888733322829665]],[14,"LeftHandMiddle3",21,[[3,"LeftHandMiddle4",-43,[0,"e5fdWyf8NaEKhDb4qtSl1L",1,0],[1,9.033828973770142e-8,0.024585068225860596,-7.264316082000732e-8],[3,-0.07933526680313234,0.0022672899622269084,-0.023023676690647022,0.9965794926392713],[1,-9.10200826481348,0.04966501139968695,-2.650852507953257]]],[0,"2duVpGOqVaHJjtIONGYvbp",1,0],[1,1.2805686511185854e-9,0.03219443932175636,1.0419171303510666e-8],[3,0.14575611406823477,-0.007176438054118005,0.010190091341903152,0.98924204115425],[1,16.772334607292525,-0.9839204893182673,1.035328858477191]],[1,"LeftHandRing1",2,[-44],[0,"7dWkLNK6RaJKWeco3DLOiq",1,0],[1,0.01677095703780651,0.08656328171491623,0.008757710456848145],[3,0.1379290188715696,0.023424887445368327,-0.08379374980521975,0.986613129800571],[1,0.9999975562095642,1.0000022649765015,1.0000009536743164],[1,16.23890063500493,4.027190451947027,-9.142014345732523]],[4,"LeftHandRing2",23,[-45],[0,"7eAvY6olFfuruZYFekaEWG",1,0],[1,3.166496753692627e-8,0.030379734933376312,5.029141902923584e-8],[3,0.17339548417130987,0.019416406693056703,0.03389936302972747,0.9840771526695993],[1,19.930098879828666,1.5202444092996874,4.21231823227251]],[14,"LeftHandRing3",24,[[3,"LeftHandRing4",-46,[0,"cbbJ97ChhWK5wlCN/AGaxi",1,0],[1,-3.259629011154175e-8,0.021250896155834198,4.6566128730773926e-9],[3,-0.015983473700521736,0.003182750466123181,0.020556526504198626,0.9996558547250236],[1,-1.8403014965235955,0.40258334034650134,2.349622824711557]]],[0,"ceY+v9JAVdc52Yf+u2ivcS",1,0],[1,-8.987262845039368e-8,0.028316345065832138,-3.9814040064811707e-8],[3,0.03109323253334704,-0.013055343264738858,-0.018817648412438503,0.9992540542880439],[1,3.537068285686683,-1.429071605375516,-2.2017935062017355]],[1,"LeftHandPinky1",2,[-47],[0,"b7/1UAhZ5S37+OOL+eD2qp",1,0],[1,0.03258330374956131,0.07914759963750839,0.005490118637681007],[3,0.1967967589859368,0.02432845148285993,-0.19264136159140727,0.9610246968238046],[1,0.9999944567680359,1.0000056028366089,1.000000238418579],[1,24.557264612073904,7.552235756171172,-21.142619802524617]],[1,"LeftHandPinky2",26,[-48],[0,"5btu9rT5tbnr+bBxG0KUm6",1,0],[1,2.60770320892334e-8,0.027637982740998268,3.4458935260772705e-8],[3,0.08557412941059551,0.033904858597911945,0.07126455893689823,0.9932013348654962],[1,0.9999996423721313,0.9999989867210388,1.0000003576278687],[1,9.611997226332397,3.1965086120876376,8.474131663851619]],[14,"LeftHandPinky3",27,[[3,"LeftHandPinky4",-49,[0,"3aTl0J2aRcsaEQScfdSQ1h",1,0],[1,-3.725290298461914e-8,0.013380760326981544,-1.6763806343078613e-8],[3,-0.03942269438933552,0.021942527850980487,0.01046324236483183,0.9989268727979085],[1,-4.544567511697211,2.560320487677253,1.0986543563582272]]],[0,"0d0OC0FDZT75BO2ETlvneE",1,0],[1,-1.4901161193847656e-8,0.017656078562140465,-2.3166649043560028e-8],[3,0.10002453139409452,-0.034647514079040764,-0.012314846127053324,0.9943052788014362],[1,11.429049416765686,-3.811240886042299,-1.8005661706697762]],[4,"RightShoulder",5,[-50],[0,"0d1e80t9NY9LWT/1KNepHO",1,0],[1,-0.06222330778837204,0.10491117089986801,-0.012486672960221767],[3,0.4816873030167389,-0.4927695349153075,0.5889063424442917,0.42230894781036604],[1,99.07384116499391,-100.32963644842613,1.2995326633771136]],[1,"RightArm",29,[-51],[0,"6fKtvX+2ZZY6db9tOECEc/",1,0],[1,-2.0489096641540527e-8,0.06534283608198166,2.6891939342021942e-8],[3,0.3848019286338267,-0.06913690348140335,-0.038287546923972925,0.9196094975842927],[1,0.9999992251396179,0.9999998211860657,1.000001072883606],[1,45.0619667747067,-5.649741627618318,-7.101485870892831]],[1,"RightForeArm",30,[3],[0,"7bG7Lt3r1RyLOydLlDwsaA",1,0],[1,-3.3527612686157227e-8,0.268842875957489,6.50179572403431e-8],[3,0.015385365668627266,0.009234410484767972,-0.2376628012939674,0.9711819649619455],[1,0.9999973773956299,1.0000020265579224,0.9999997019767761],[1,2.213884267657679,1.6308139837091449,-27.47383533632804]],[1,"RightHandThumb1",3,[-52],[0,"5boL5QSkBWiLGlgb58cyUg",1,0],[1,0.016604753211140633,0.01429855078458786,0.015932995826005936],[3,0.1792839023027709,-0.003093747659307747,-0.3681807821238754,0.9122996343171264],[1,1.0000081062316895,0.9999905824661255,1.0000014305114746],[1,26.04844459578184,9.836313907145634,-42.29064215203375]],[1,"RightHandThumb2",32,[-53],[0,"f3ax4hMqZWB7+UoHlfIuSX",1,0],[1,1.4901161193847656e-8,0.03407897800207138,-8.335337042808533e-8],[3,0.035357672377809596,0.01829158869505207,0.22104045534071007,0.9744518304615195],[1,0.9999914765357971,1.000008463859558,1],[1,3.867125757593797,1.2718705964059573,25.599637853476377]],[12,"RightHandThumb3",33,[[26,"RightHandThumb4",-54,[0,"cb9OqMqtpfJYxoIqLY61Jv",1,0],[1,7.7858567237854e-7,0.033779390156269073,2.421438694000244e-8],[3,-0.03271630806200071,-0.029702572399791936,-0.043204777303136245,0.9980885469725689],[1,1.0000022649765015,0.999997615814209,0.9999995231628418],[1,-3.905818224412972,-3.5741655616094086,-4.835823363207221]]],[0,"eeyN64h4pZ56kJacLLX/2d",1,0],[1,-1.0803341865539551e-7,0.03116912953555584,-7.35744833946228e-8],[3,0.06517780441205284,-0.0025984793379295414,0.06589174883282621,0.995692411918915],[1,0.9999963045120239,1.000003457069397,0.9999997615814209],[1,7.542732331714141,-0.7954827777723994,7.520279629665837]],[1,"RightHandIndex1",3,[-55],[0,"87XkG06wVXsYR+HeX66z0u",1,0],[1,0.021300479769706726,0.08553427457809448,0.014612238854169846],[3,0.10182590229334133,0.013132057399980173,-0.07580614977775536,0.9918227978557779],[1,1.000002384185791,0.9999973177909851,1.000000238418579],[1,11.902063052409739,2.404118193230551,-8.493555501444463]],[1,"RightHandIndex2",35,[-56],[0,"4bMI2hCiRaeKUpV3NQMqOA",1,0],[1,2.3981556296348572e-8,0.03222107142210007,5.4016709327697754e-8],[3,0.17599354565209868,-0.033190935625449516,0.025113727727392288,0.9835110240158695],[1,0.9999986886978149,1.0000004768371582,1.0000016689300537],[1,20.37102185876199,-4.254096482150012,2.1615075263054924]],[12,"RightHandIndex3",36,[[3,"RightHandIndex4",-57,[0,"c8Rw31GzFdqYw3kcBCbI38",1,0],[1,5.587935447692871e-9,0.02558840811252594,-4.6566128730773926e-8],[3,-0.06403357508701223,-0.042658615678161,0.030687915032337195,0.9965631919958547],[1,-7.197341688231667,-4.661827796100392,3.820336827546301]]],[0,"7chBclf8heD4tlvIHwXUmv",1,0],[1,-1.862645149230957e-9,0.02831629104912281,2.9336661100387573e-8],[3,0.13336865405669712,0.046558398061308515,0.03151124296434188,0.9894706459778946],[1,0.9999980330467224,1.0000007152557373,1.0000005960464478],[1,15.172578042431775,4.816579903273157,4.288453126787622]],[4,"RightHandMiddle1",3,[-58],[0,"2bF9hvIEpU9YVehpBbrG7X",1,0],[1,0.004850717261433601,0.08382271975278854,0.010622730478644371],[3,0.10420267366806604,0.00026895842379634624,0.02734151131802422,0.9941801507878938],[1,11.975020689789071,-0.2962774447022999,3.119624920413254]],[1,"RightHandMiddle2",38,[-59],[0,"89E5CEBipVn495sry9qEOF",1,0],[1,0,0.03819426894187927,-1.1920928955078125e-7],[3,0.15074953304766475,-0.022920412741941093,-0.03965170646734219,0.9875104936859548],[1,1.0000008344650269,0.9999983906745911,1.000000238418579],[1,17.27728518528537,-1.916040615601896,-4.8888734024595]],[12,"RightHandMiddle3",39,[[3,"RightHandMiddle4",-60,[0,"97SaK1w0xf4q4p2gv+9BO1",1,0],[1,-1.1175870895385742e-8,0.024584732949733734,4.470348358154297e-8],[3,-0.07933632797676574,-0.0022698418971109175,0.02302466451909459,0.9965793795301549],[1,-9.102124008109648,-0.049944936721641776,2.650988640859151]]],[0,"6fRF7nx8pcFZlHcPr3UIGH",1,0],[1,1.664739102125168e-8,0.032193686813116074,-7.043126970529556e-8],[3,0.14575624892919692,0.007178436709373612,-0.010192046240513961,0.9892419866432735],[1,1.0000001192092896,0.9999988079071045,1.0000005960464478],[1,16.77235476797215,0.9841799576588496,-1.0355169371446156]],[1,"RightHandRing1",3,[-61],[0,"adh94px0RcxJPuz9N5CX7u",1,0],[1,-0.016713248565793037,0.0863463431596756,0.008878989145159721],[3,0.13792911098281171,-0.02342532562625104,0.08379535332292354,0.9866129703304541],[1,0.9999964237213135,1.000002145767212,1.0000004768371582],[1,16.238926135319808,-4.027268931188389,9.142189151801944]],[4,"RightHandRing2",41,[-62],[0,"31wfKbieFafK69mUtJ2/Cc",1,0],[1,-1.4901161193847656e-8,0.030379479750990868,3.818422555923462e-8],[3,0.17339772382325697,-0.01941320903266628,-0.033895921736820774,0.9840769396635504],[1,19.930373174618754,-1.5199412236945211,-4.2118695749240045]],[14,"RightHandRing3",42,[[3,"RightHandRing4",-63,[0,"4cGSXq1PVb0YY5HZUIIC/Y",1,0],[1,-1.6763806343078613e-8,0.021251119673252106,-5.681067705154419e-8],[3,-0.015971900953318827,-0.003168639039967461,-0.020559409708041966,0.9996560252301933],[1,-1.8389425644811934,-0.40094360931076284,-2.3499838552475367]]],[0,"b0MMt6VCtWgIWK18ulzznK",1,0],[1,1.1175870895385742e-8,0.028316795825958252,-3.934837877750397e-8],[3,0.031084604247722112,0.013043801168631164,0.018812296722280335,0.9992545742311458],[1,3.5361109275119116,1.4277864252517438,2.201127312782654]],[1,"RightHandPinky1",3,[-64],[0,"4aUTR+2tNWe6qWC89rjgMe",1,0],[1,-0.03260491043329239,0.07897919416427612,0.005533408373594284],[3,0.19679642203471315,-0.02432845219683907,0.19264334909943603,0.9610243673995961],[1,0.9999938011169434,1.0000056028366089,1.0000003576278687],[1,24.557258928895187,-7.552286962307046,21.14284766737757]],[4,"RightHandPinky2",44,[-65],[0,"d83beFDPxV26NsRCBkwvIL",1,0],[1,3.725290298461914e-9,0.027638332918286324,5.029141902923584e-8],[3,0.08557223634339191,-0.03390765604542929,-0.07126061706363185,0.9932016853008284],[1,9.611761236427355,-3.196883605220818,-8.473701268852047]],[14,"RightHandPinky3",45,[[3,"RightHandPinky4",-66,[0,"c0zHWrzY1Xmrv3EsCPAU3d",1,0],[1,-3.725290298461914e-8,0.01338125392794609,3.073364496231079e-8],[3,-0.0394342160311366,-0.02195529962953263,-0.010462966512654829,0.9989261402906333],[1,-4.545901947190326,-2.5617948213900212,-1.0985351959743275]]],[0,"02Y4ZUb2ldEIwd2vVwvfLe",1,0],[1,2.421438694000244e-8,0.017655447125434875,1.6996636986732483e-8],[3,0.10003404850051663,0.03465735838080073,0.012309890908051164,0.9943040396360124],[1,11.430145037017601,3.812403261508557,1.8001502564083134]],[1,"LeftUpLeg",4,[-67],[0,"90OjcI6PJX15rkgsB0DaU9",1,0],[1,0.09545618295669556,-0.019578784704208374,0.0027796693611890078],[3,-0.0018985148441538467,-0.056329638916863885,0.9978473390382353,-0.03352693536837638],[1,0.999996542930603,1.000000238418579,0.9999909996986389],[1,173.5235271856524,179.56552993032463,-3.8242175494550414]],[4,"LeftLeg",47,[-68],[0,"93zXwIEWpRZ5LOx9BRTfmH",1,0],[1,-5.2532413974404335e-9,0.4475076496601105,4.8407855501864105e-9],[3,-0.03768055242298042,0.00034269010405498207,-0.0009753281163623315,0.9992893010873564],[1,-4.31886338539204,0.035030211899499196,-0.1131647046085818]],[1,"LeftFoot",48,[-69],[0,"e85jVStFtVE4Mzoc2RBRMD",1,0],[1,2.153683453798294e-9,0.449558824300766,3.841705620288849e-9],[3,0.49507451416665976,-0.01495932519114674,-0.029909767427512342,0.8682066861208243],[1,0.9999994039535522,1.000002145767212,0.999998152256012],[1,59.392856852114065,0.20899768339719324,-3.8272058952206227]],[12,"LeftToeBase",49,[[3,"LeftToe_End",-70,[0,"a6npLaNqlXJrOD34u+q7RO",1,0],[1,-1.877197064459324e-9,0.08319578319787979,2.0954757928848267e-9],[3,0.01626001145638867,0.7088009861006852,-0.024402138348141176,0.7047987725402],[1,3.2972605938849866,90.34314590598088,-0.6501474433501163]]],[0,"45ec7QSOpeCrivFPZCzCIA",1,0],[1,3.344393917359412e-8,0.1565728783607483,-9.924406185746193e-9],[3,0.33071101499023847,-0.01028095396493261,0.02613717007267236,0.9433140383193126],[1,1.0000003576278687,0.9999877214431763,1.0000114440917969],[1,38.68447359355209,-2.104215240266067,2.436439090642828]],[1,"RightUpLeg",4,[-71],[0,"0c7Ufv115aVa3iFrVRpwA4",1,0],[1,-0.09545594453811646,-0.019578782841563225,0.0027896396350115538],[3,0.001958650022481491,-0.05637875804217319,0.9978443732150957,0.03352918392512124],[1,1.000001072883606,0.9999998807907104,1.000003695487976],[1,173.51764889280244,-179.5584352833053,3.824063731596133]],[4,"RightLeg",51,[-72],[0,"a6iFhD2vVSvpY56XZRJH+M",1,0],[1,2.996966941282153e-8,0.4475075900554657,-5.70253178011626e-10],[3,-0.03768257460998319,-0.0003433416165380136,0.000975584504399097,0.9992892243600809],[1,-4.31909519557901,-0.03510348072939806,0.11319694782779205]],[4,"RightFoot",52,[-73],[0,"c8vgkuI81c7pLZHFw9JmFe",1,0],[1,-2.3326720111072063e-8,0.44955798983573914,1.5133991837501526e-9],[3,0.4950786520093194,0.014956265655079194,0.029910521516046784,0.868204353332168],[1,59.39341352502582,-0.20936382970941714,3.8271062210044127]],[12,"RightToeBase",53,[[3,"RightToe_End",-74,[0,"84L23ReC1VTYlcayUIAwXC",1,0],[1,5.107722245156765e-9,0.0831962376832962,-1.3387762010097504e-9],[3,0.016272383173098936,-0.7088771620307915,0.024420675434129867,0.7047212280812745],[1,3.2998385127651577,-90.35562574062938,0.650280673607423]]],[0,"b9ylPkslJXfqHuL/ubLMji",1,0],[1,-6.803020369261503e-10,0.15657222270965576,-3.637978807091713e-9],[3,0.33071556788127116,0.010382405513868714,-0.026126211588717512,0.9433116345538921],[1,0.9999999403953552,1.0000020265579224,0.9999978542327881],[1,38.685188978919605,2.1147860148881534,-2.4313926805138104]],[9,"EyeLeft",1,[[11,-75,[7,"42+bIkdlldH5m2SY2vbhWA"],[0],[6],1,1,2]],[0,"e5nF9H3gFU7qKbx2E9uLKP",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"EyeRight",1,[[11,-76,[7,"c5No94hRZcpbucndHH4VHp"],[3],[6],1,4,5]],[0,"a5lnkD419eK7Ho4R3BkN0k",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Body",1,[[11,-77,[7,"14HT+Ss/JfE5t+8KU3Lc9D"],[6,7],[6],1,8,9]],[0,"20V3uoAElb6Yo0U4fokikJ",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Hair",1,[[11,-78,[7,"ecuQzjd4xckq3bBbyRPZvq"],[10],[6],1,11,12]],[0,"34GBqS3wNZwbZ0QyraNwcW",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Head",1,[[11,-79,[7,"6616ak0WtUhqWpHga/rmWz"],[13],[6],1,14,15]],[0,"afJYaSCclY8LCWXRZoEKS7",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Outfit_Bottom",1,[[11,-80,[7,"abKFPKt0BZC7HyNYQSwgjY"],[16],[6],1,17,18]],[0,"20piYU63pT/5fzePRsKhsm",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Outfit_Footwear",1,[[11,-81,[7,"5eZN80PptU3bx+COgqOIPB"],[19],[6],1,20,21]],[0,"5carKXjR1R54Yl0m6ynvhA",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Outfit_Top",1,[[11,-82,[7,"19bZ1e4xpfb7lnFz+uINE+"],[22],[6],1,23,24]],[0,"d5b/R/i+9UsIjj6Y5yVJ2F",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[9,"Wolf3D_Teeth",1,[[11,-83,[7,"e0BfFvLmpTM7THypvB5nug"],[25],[6],1,26,27]],[0,"e94vfjSFlUkq3wOOam3JGj",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]]],0,[0,15,1,0,0,1,0,-1,7,0,-2,55,0,-3,56,0,-4,57,0,-5,58,0,-6,59,0,-7,60,0,-8,61,0,-9,62,0,-10,63,0,-1,14,0,-2,17,0,-3,20,0,-4,23,0,-5,26,0,-1,32,0,-2,35,0,-3,38,0,-4,41,0,-5,44,0,-1,8,0,-2,47,0,-3,51,0,-1,10,0,-2,11,0,-3,29,0,1,6,0,1,6,0,1,6,0,-1,9,0,-1,12,0,-1,13,0,-1,15,0,-1,16,0,1,16,0,-1,18,0,-1,19,0,1,19,0,-1,21,0,-1,22,0,1,22,0,-1,24,0,-1,25,0,1,25,0,-1,27,0,-1,28,0,1,28,0,-1,30,0,-1,31,0,-1,33,0,-1,34,0,1,34,0,-1,36,0,-1,37,0,1,37,0,-1,39,0,-1,40,0,1,40,0,-1,42,0,-1,43,0,1,43,0,-1,45,0,-1,46,0,1,46,0,-1,48,0,-1,49,0,-1,50,0,1,50,0,-1,52,0,-1,53,0,-1,54,0,1,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,25,1,2,1,13,3,1,31,4,1,7,5,1,9,6,1,10,83],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,2,5,-1,2,5,-1,2,5,-1,2,5,-1,2,5],[6,28,29,6,30,31,7,7,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]],[[[10,"Skin-5",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,"Skin-2",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,"Skin-6",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",2084106885,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":55368,"length":15912,"count":3978,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":55368,"count":769,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]]},"minPosition",8,[1,-0.11491847783327103,-0.15681199729442596,1.4733881950378418],"maxPosition",8,[1,0.11377768218517303,0.08355867117643356,1.7631176710128784]]],-1],0,0,[],[],[]],[[[5,".bin",2310547145,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":7416,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7416,"count":103,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":8616,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":9852,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":11088,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":12324,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":13560,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":14796,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":16032,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":17268,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":18504,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":19740,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":20976,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":22212,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":23448,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":24684,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":25920,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":27156,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":28392,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":29628,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":30864,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":32100,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":33336,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":34572,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":35808,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":37044,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":38280,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":39516,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":40752,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":41988,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":43224,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":44460,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":45696,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":46932,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":48168,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":49404,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":50640,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":51876,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":53112,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":54348,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":55584,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":56820,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":58056,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":59292,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":60528,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":61764,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":63000,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":64236,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":65472,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":66708,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":67944,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":69180,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":70416,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":71652,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":72888,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":74124,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":75360,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":76596,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":77832,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":79068,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":80304,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":81540,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":82776,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":84012,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":85248,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":86484,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":87720,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":88956,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":90192,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":91428,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":92664,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":93900,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":95136,"length":1236,"stride":4,"count":309}]},{"displacements":[{"offset":96372,"length":1236,"stride":4,"count":309}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.027054257690906525,-0.13663986325263977,1.5413544178009033],"maxPosition",8,[1,0.0270541999489069,-0.07165833562612534,1.5771987438201904]]],-1],0,0,[],[],[]],[[[5,".bin",2580346546,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":2472,"count":618,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":120,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,8]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":11112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":12552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":13992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":15432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":16872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":18312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":19752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":21192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":22632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":24072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":25512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":26952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":28392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":29832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":31272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":32712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":34152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":35592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":37032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":38472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":39912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":41352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":42792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":44232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":45672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":47112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":48552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":49992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":51432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":52872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":54312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":55752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":57192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":58632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":60072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":61512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":62952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":64392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":65832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":67272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":68712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":70152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":71592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":73032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":74472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":75912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":77352,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":78792,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":80232,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":81672,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":83112,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":84552,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":85992,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":87432,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":88872,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":90312,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":91752,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":93192,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":94632,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":96072,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":97512,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":98952,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":100392,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":101832,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":103272,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":104712,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":106152,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":107592,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":109032,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":110472,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":111912,"length":1440,"stride":4,"count":360}]},{"displacements":[{"offset":113352,"length":1440,"stride":4,"count":360}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.05510198324918747,-0.1304795891046524,1.603315830230713],"maxPosition",8,[1,-0.012672126293182373,-0.1092824935913086,1.6459373235702515]]],-1],0,0,[],[],[]],[[[5,".bin",1995221252,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":158472,"length":49128,"count":12282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":158472,"count":2201,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,5,9,33]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":207600,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":234012,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":260424,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":286836,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":313248,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":339660,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":366072,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":392484,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":418896,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":445308,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":471720,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":498132,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":524544,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":550956,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":577368,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":603780,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":630192,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":656604,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":683016,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":709428,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":735840,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":762252,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":788664,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":815076,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":841488,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":867900,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":894312,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":920724,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":947136,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":973548,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":999960,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1026372,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1052784,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1079196,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1105608,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1132020,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1158432,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1184844,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1211256,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1237668,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1264080,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1290492,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1316904,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1343316,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1369728,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1396140,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1422552,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1448964,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1475376,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1501788,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1528200,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1554612,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1581024,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1607436,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1633848,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1660260,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1686672,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1713084,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1739496,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1765908,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1792320,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1818732,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1845144,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1871556,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1897968,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1924380,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1950792,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":1977204,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2003616,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2030028,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2056440,"length":26412,"stride":4,"count":6603}]},{"displacements":[{"offset":2082852,"length":26412,"stride":4,"count":6603}]}]}],"targetNames":["mouthOpen","mouthSmile","eyesClosed","eyesLookUp","eyesLookDown","viseme_sil","viseme_PP","viseme_FF","viseme_TH","viseme_DD","viseme_kk","viseme_CH","viseme_SS","viseme_nn","viseme_RR","viseme_aa","viseme_E","viseme_I","viseme_O","viseme_U","eyeBlinkLeft","eyeLookDownLeft","eyeLookInLeft","eyeLookOutLeft","eyeLookUpLeft","eyeSquintLeft","eyeWideLeft","eyeBlinkRight","eyeLookDownRight","eyeLookInRight","eyeLookOutRight","eyeLookUpRight","eyeSquintRight","eyeWideRight","jawForward","jawLeft","jawRight","jawOpen","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","mouthDimpleLeft","mouthDimpleRight","mouthStretchLeft","mouthStretchRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut"]}},"minPosition",8,[1,-0.0944768637418747,-0.15442170202732086,1.4258748292922974],"maxPosition",8,[1,0.09447572380304337,0.048887014389038086,1.7368122339248657]]],-1],0,0,[],[],[]],[[[10,"Skin-3",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[10,"Skin-7",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",1190703841,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":39384,"length":4836,"count":2418,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":84828,"length":4752,"count":2376,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":39384,"count":547,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":44220,"length":40608,"count":564,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,11,12,13,14,17,18,21,25,29,35,36,37,38,39,40,41,42,43,45,46,47,49,50,51,53,54,55,56],[0,11,12,13,14,15,16,17,18,19,21,22,23,25,26,27,29,30,31,32,58,59,63,64]]},"minPosition",8,[1,-0.4639584720134735,-0.17666086554527283,0.05500945821404457],"maxPosition",8,[1,0.46395882964134216,0.0856829434633255,1.0667197704315186]]],-1],0,0,[],[],[]],[[[5,".bin",3754149341,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":121320,"length":32640,"count":8160,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":121320,"count":1685,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,9,10,11,12,13,33,34,35,36,37]]},"minPosition",8,[1,-0.4375903308391571,-0.16034118831157684,0.9976201057434082],"maxPosition",8,[1,0.4375903606414795,0.08329467475414276,1.5447827577590942]]],-1],0,0,[],[],[]],[[[10,"Skin-1",2450553263,["Armature/Hips","Armature/Hips/Spine","Armature/Hips/Spine/Spine1","Armature/Hips/Spine/Spine1/Spine2","Armature/Hips/Spine/Spine1/Spine2/Neck","Armature/Hips/Spine/Spine1/Spine2/Neck/Head","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/LeftEye","Armature/Hips/Spine/Spine1/Spine2/Neck/Head/RightEye","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandThumb1/LeftHandThumb2/LeftHandThumb3/LeftHandThumb4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandIndex1/LeftHandIndex2/LeftHandIndex3/LeftHandIndex4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandMiddle1/LeftHandMiddle2/LeftHandMiddle3/LeftHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandRing1/LeftHandRing2/LeftHandRing3/LeftHandRing4","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3","Armature/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/LeftHandPinky1/LeftHandPinky2/LeftHandPinky3/LeftHandPinky4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandThumb1/RightHandThumb2/RightHandThumb3/RightHandThumb4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandIndex1/RightHandIndex2/RightHandIndex3/RightHandIndex4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandMiddle1/RightHandMiddle2/RightHandMiddle3/RightHandMiddle4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandRing1/RightHandRing2/RightHandRing3/RightHandRing4","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3","Armature/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/RightHandPinky1/RightHandPinky2/RightHandPinky3/RightHandPinky4","Armature/Hips/LeftUpLeg","Armature/Hips/LeftUpLeg/LeftLeg","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase","Armature/Hips/LeftUpLeg/LeftLeg/LeftFoot/LeftToeBase/LeftToe_End","Armature/Hips/RightUpLeg","Armature/Hips/RightUpLeg/RightLeg","Armature/Hips/RightUpLeg/RightLeg/RightFoot","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase","Armature/Hips/RightUpLeg/RightLeg/RightFoot/RightToeBase/RightToe_End"],[[[7,1,-5.762066171421942e-12,-0.00005230325405136682,0,-0.000052209245041012764,0.059929009526968,-0.9982026815414429,0,0.000003134487769784755,0.9982026815414429,0.059929009526968,0,-0.000005361115654523019,-1.0326776504516602,-0.10250049084424973,1],[7,1,-1.2615232469759263e-10,2.790802682284266e-7,0,2.780226679988118e-7,0.08742538094520569,-0.9961711764335632,0,-2.4273022702914204e-8,0.9961711764335632,0.08742538094520569,0,3.714025709200541e-8,-1.1257860660552979,-0.1335877627134323,1],[7,1,-2.2340705640999658e-7,4.689275385771907e-7,0,4.985697046322457e-7,0.15958163142204285,-0.9871849417686462,0,1.457118088410425e-7,0.9871849417686462,0.15958163142204285,0,-1.6508963085470896e-7,-1.204335331916809,-0.22168751060962677,1],[7,1,-1.0630722691029604e-10,1.6337378383468604e-7,0,1.6328836238699296e-7,0.03299099579453468,-0.9994556903839111,0,-5.283614434858919e-9,0.9994556903839111,0.03299099579453468,0,3.5469806647370206e-8,-1.3433698415756226,-0.051595538854599,1],[7,1,2.8769810000994767e-7,2.0190964278299361e-7,0,2.661712414919748e-7,-0.24470071494579315,-0.9695987105369568,0,-2.2954426981414144e-7,0.9695987105369568,-0.24470071494579315,0,3.6516834711619595e-7,-1.4248322248458862,0.35634806752204895,1],[7,1,6.408016783865378e-9,3.035478073343256e-7,0,3.0145631058076106e-7,-0.13997575640678406,-0.990155041217804,0,3.6144399473414524e-8,0.990155041217804,-0.13997575640678406,0,-4.754674876039644e-8,-1.5449719429016113,0.1927962601184845,1],[7,1,-1.1129899224471274e-9,9.359954589172048e-8,0,9.360565655924802e-8,0.008631200529634953,-0.9999628067016602,0,3.050720231989601e-10,0.9999628067016602,0.008631200529634953,0,4.1346108758943956e-9,-1.7357771396636963,-0.06572462618350983,1],[7,1,-3.1506766084987703e-9,2.993091072767129e-7,0,2.9930907885500346e-7,-3.874303047268768e-7,-1.0000001192092896,0,3.1507920716933313e-9,1.000000238418579,-3.874303047268768e-7,0,-0.033746831119060516,-1.624668836593628,-0.10928211361169815,1],[7,1,-3.1506945941117692e-9,2.9930907885500346e-7,0,2.9930907885500346e-7,-3.27825716794905e-7,-1,0,3.1507920716933313e-9,1.000000238418579,-3.2782563152977673e-7,0,0.03317180275917053,-1.6246106624603271,-0.10928221791982651,1],[7,-0.17926520109176636,0.972122311592102,-0.15113681554794312,0,0.9822558760643005,0.16825248301029205,-0.08285398781299591,0,-0.05511506274342537,-0.16330784559249878,-0.9850344657897949,0,0.08246582001447678,0.17464634776115417,1.437225341796875,1],[7,-0.042080458253622055,0.5767046213150024,-0.8158683180809021,0,0.9988806247711182,0.04194912686944008,-0.021867606788873672,0,0.021613813936710358,-0.8158749938011169,-0.5778242349624634,0,-0.045456383377313614,1.099975824356079,0.9339972734451294,1],[7,0.20813797414302826,0.5099188089370728,-0.8346625566482544,0,0.9046704173088074,-0.4247615933418274,-0.03390312194824219,0,-0.37182044982910156,-0.7480379343032837,-0.5497172474861145,0,0.3667079210281372,0.7816587686538696,0.9053910970687866,1],[7,-0.0393470823764801,0.48925405740737915,-0.871253252029419,0,0.9028626084327698,-0.3561762869358063,-0.24078598618507385,0,-0.4281252324581146,-0.7960963845252991,-0.4277144968509674,0,0.5263192057609558,0.5874914526939392,0.7790519595146179,1],[7,0.19043150544166565,0.0645550787448883,-0.9795759320259094,0,0.38796672224998474,-0.9215564131736755,0.014689967967569828,0,-0.9017859697341919,-0.3828401565551758,-0.20053859055042267,0,0.8778553009033203,0.26818883419036865,0.6025875210762024,1],[7,0.12418082356452942,0.06444750726222992,-0.9901645183563232,0,0.7482730150222778,-0.6614435315132141,0.05079234018921852,0,-0.6516644358634949,-0.7472208142280579,-0.13036292791366577,0,0.7024045586585999,0.6340748071670532,0.541410505771637,1],[7,0.12830515205860138,-0.0484919399023056,-0.9905486106872559,0,0.8276292085647583,-0.5450730323791504,0.1338861584663391,0,-0.5464136004447937,-0.836985170841217,-0.02980232797563076,0,0.6099373698234558,0.7550302743911743,0.455959290266037,1],[7,0.18505968153476715,0.0026327939704060555,-0.9827237725257874,0,0.7688184976577759,-0.6232481002807617,0.1431088000535965,0,-0.6121039390563965,-0.782019853591919,-0.11736223101615906,0,0.6390452980995178,0.6346246004104614,0.5375863313674927,1],[7,-0.0027641139458864927,0.305260568857193,-0.9522649645805359,0,0.8295753598213196,-0.5310373306274414,-0.1726386994123459,0,-0.5583878755569458,-0.790452778339386,-0.2517687976360321,0,0.6469927430152893,0.5548482537269592,0.6401251554489136,1],[7,0.0563027486205101,-0.04228265956044197,-0.9975181221961975,0,0.8595250248908997,-0.5062812566757202,0.06997419893741608,0,-0.5079833269119263,-0.861331582069397,0.007837978191673756,0,0.5776023268699646,0.7496459484100342,0.45376911759376526,1],[7,-0.02438901923596859,-0.30406618118286133,-0.952338695526123,0,0.8978109359741211,-0.42565977573394775,0.11291361600160599,0,-0.439705491065979,-0.8522661924362183,0.2833753228187561,0,0.5579931139945984,0.8441776037216187,0.18935194611549377,1],[7,0.07323651760816574,-0.17832252383232117,-0.9812429547309875,0,0.9120607376098633,-0.38605400919914246,0.1382310390472412,0,-0.40346240997314453,-0.9050767421722412,0.1343676596879959,0,0.4850059151649475,0.8167596459388733,0.339074969291687,1],[7,-0.06141406297683716,0.2952314615249634,-0.9534499645233154,0,0.922137975692749,-0.3487713932991028,-0.16739261150360107,0,-0.3819555640220642,-0.8894928097724915,-0.25082460045814514,0,0.49900951981544495,0.6797901391983032,0.6440251469612122,1],[7,-0.004241649992763996,-0.00034227175638079643,-0.9999907612800598,0,0.8941221237182617,-0.4478082060813904,-0.003639314090833068,0,-0.44780290126800537,-0.8941294550895691,0.0022054784931242466,0,0.5301441550254822,0.7677075266838074,0.4527651369571686,1],[7,-0.02141539566218853,-0.28846070170402527,-0.9572522640228271,0,0.8856906294822693,-0.4496338963508606,0.1156792938709259,0,-0.4637819826602936,-0.845352053642273,0.26511597633361816,0,0.5510430932044983,0.8228119015693665,0.21531634032726288,1],[7,-0.007222409825772047,-0.13403065502643585,-0.9909507632255554,0,0.9054377675056458,-0.42147573828697205,0.05040735751390457,0,-0.4244178533554077,-0.8968802094459534,0.12440045177936554,0,0.5133491158485413,0.778351366519928,0.34324532747268677,1],[7,-0.05607423931360245,0.2233036309480667,-0.9731348156929016,0,0.9624785780906677,-0.24709367752075195,-0.11216037720441818,0,-0.2655012309551239,-0.9429107308387756,-0.20106934010982513,0,0.36883479356765747,0.7690005302429199,0.6136130690574646,1],[7,-0.013753178529441357,-0.12065543234348297,-0.992599368095398,0,0.9443587064743042,-0.3278271555900574,0.026764266192913055,0,-0.3286302089691162,-0.9370015263557434,0.11845064908266068,0,0.40572741627693176,0.8805986046791077,0.3435874283313751,1],[7,-0.03383984789252281,-0.18301057815551758,-0.9825286269187927,0,0.9566298723220825,-0.2905367314815521,0.021168941631913185,0,-0.2893347144126892,-0.9391995668411255,0.1849050670862198,0,0.3811204135417938,0.8864787220954895,0.27920326590538025,1],[7,-0.034415699541568756,-0.15009917318820953,-0.988071858882904,0,0.9437420964241028,-0.3302302062511444,0.017294026911258698,0,-0.3288869559764862,-0.9318896532058716,0.1530200093984604,0,0.41430234909057617,0.8394662737846375,0.3089919686317444,1],[7,-0.10604864358901978,0.07871300727128983,-0.9912406802177429,0,0.9927676916122437,-0.04802782088518143,-0.11002583801746368,0,-0.05626758560538292,-0.9957398176193237,-0.07305043935775757,0,0.1783255934715271,0.9041304588317871,0.5013333559036255,1],[7,-0.038459792733192444,-0.0821295902132988,-0.9958794116973877,0,0.9793922305107117,-0.20084668695926666,-0.021259356290102005,0,-0.19827306270599365,-0.9761740565299988,0.08816157281398773,0,0.27761751413345337,0.9181856513023376,0.36226722598075867,1],[7,-0.10193826258182526,-0.2800765037536621,-0.95455002784729,0,0.9816420078277588,-0.18381723761558533,-0.050897251814603806,0,-0.1612076312303543,-0.9422146677970886,0.2936728298664093,0,0.2726394236087799,0.9594790935516357,0.15598109364509583,1],[7,-0.06455499678850174,-0.2020946592092514,-0.977236270904541,0,0.9792306423187256,-0.20143893361091614,-0.023028699681162834,0,-0.1921994388103485,-0.9584259986877441,0.21090111136436462,0,0.2834911644458771,0.9245659708976746,0.24202287197113037,1],[7,-0.17926494777202606,-0.9721225500106812,0.15113502740859985,0,-0.982255756855011,0.16825243830680847,-0.08285336196422577,0,0.05511478707194328,-0.16330596804618835,-0.985034704208374,0,-0.08246543258428574,0.1746436357498169,1.437225580215454,1],[7,-0.04208013415336609,-0.576706051826477,0.8158672451972961,0,-0.9988802671432495,0.041949354112148285,-0.021867014467716217,0,-0.021614260971546173,-0.8158740997314453,-0.5778255462646484,0,0.04545703902840614,1.099974513053894,0.9339991211891174,1],[7,0.20813915133476257,-0.5099197626113892,0.8346615433692932,0,-0.904670238494873,-0.42476150393486023,-0.033902306109666824,0,0.37181952595710754,-0.7480371594429016,-0.5497187376022339,0,-0.36670660972595215,0.7816579937934875,0.9053927063941956,1],[7,-0.03934556990861893,-0.48925548791885376,0.8712525367736816,0,-0.9028608798980713,-0.3561795651912689,-0.24078702926635742,0,0.428128719329834,-0.7960938811302185,-0.4277154803276062,0,-0.5263225436210632,0.5874897241592407,0.7790530920028687,1],[7,0.19043561816215515,-0.06455707550048828,0.9795746207237244,0,-0.3879657983779907,-0.9215565919876099,0.014689539559185505,0,0.9017853140830994,-0.3828388750553131,-0.2005431354045868,0,-0.8778547048568726,0.2681874632835388,0.6025919914245605,1],[7,0.1241966038942337,-0.06445562094449997,0.9901617765426636,0,-0.748275101184845,-0.6614404916763306,0.05079946294426918,0,0.6516587734222412,-0.7472227811813354,-0.13037919998168945,0,-0.7023941278457642,0.634075403213501,0.5414268374443054,1],[7,0.1283092200756073,0.048491086810827255,0.9905480146408081,0,-0.8276357054710388,-0.5450621843338013,0.13388946652412415,0,0.5464025735855103,-0.8369923830032349,-0.02980354055762291,0,-0.609926700592041,0.7550404071807861,0.4559609293937683,1],[7,0.1850474327802658,-0.002626412082463503,0.982725977897644,0,-0.768819272518158,-0.6232481598854065,0.14310310781002045,0,0.612106204032898,-0.7820197939872742,-0.11734969913959503,0,-0.6390533447265625,0.6346284747123718,0.5375745892524719,1],[7,-0.0027636124286800623,-0.30526161193847656,0.9522643685340881,0,-0.8295758366584778,-0.531036376953125,-0.17263861000537872,0,0.558387041091919,-0.7904529571533203,-0.25177010893821716,0,-0.6469926238059998,0.5548495054244995,0.6401265263557434,1],[7,0.05632105469703674,0.04227294772863388,0.9975172281265259,0,-0.859527587890625,-0.5062748193740845,0.06998497247695923,0,0.5079763531684875,-0.8613356351852417,0.00782083161175251,0,-0.5775888562202454,0.7496472001075745,0.4537865221500397,1],[7,-0.024397170171141624,0.3040727376937866,0.9523364901542664,0,-0.8978123068809509,-0.42565783858299255,0.11290848255157471,0,0.43970179557800293,-0.8522648215293884,0.28338512778282166,0,-0.5579943656921387,0.8441810011863708,0.1893412321805954,1],[7,0.07322605699300766,0.1783279925584793,0.9812425374984741,0,-0.9120582938194275,-0.3860614597797394,0.13822472095489502,0,0.4034692645072937,-0.9050722122192383,0.13437576591968536,0,-0.48501673340797424,0.816758394241333,0.33906665444374084,1],[7,-0.06141382083296776,-0.2952326238155365,0.9534493684768677,0,-0.9221376180648804,-0.3487716019153595,-0.16739295423030853,0,0.3819560110569,-0.8894919753074646,-0.2508257031440735,0,-0.49900126457214355,0.6800471544265747,0.644083559513092,1],[7,-0.004232815001159906,0.00033611050457693636,0.9999908804893494,0,-0.8941219449043274,-0.44780856370925903,-0.003634173423051834,0,0.4478032886981964,-0.8941292762756348,0.002196015091612935,0,-0.5301520824432373,0.7679678201675415,0.4527529180049896,1],[7,-0.021410934627056122,0.2884550392627716,0.9572539925575256,0,-0.8856887221336365,-0.4496365487575531,0.1156814843416214,0,0.4637853801250458,-0.8453521132469177,0.265108585357666,0,-0.5510598421096802,0.8230555057525635,0.21522685885429382,1],[7,-0.0072128381580114365,0.13402234017848969,0.9909521341323853,0,-0.9054365158081055,-0.42147743701934814,0.050412777811288834,0,0.42442047595977783,-0.8968803286552429,0.12438877671957016,0,-0.513351559638977,0.7786068916320801,0.34320029616355896,1],[7,-0.05607331916689873,-0.2233048975467682,0.9731343984603882,0,-0.9624782204627991,-0.2470942884683609,-0.11215993016958237,0,0.2655017673969269,-0.9429101347923279,-0.2010706663131714,0,-0.3688659965991974,0.7691839337348938,0.6134396195411682,1],[7,-0.01375904493033886,0.12065882235765457,0.9925985932350159,0,-0.9443603754043579,-0.32782191038131714,0.026759158819913864,0,0.32862430810928345,-0.9370027780532837,0.1184559315443039,0,-0.40577417612075806,0.8807131052017212,0.3433564305305481,1],[7,-0.033824749290943146,0.18299661576747894,0.9825314283370972,0,-0.956627607345581,-0.29054203629493713,0.021180517971515656,0,0.28934264183044434,-0.9392003417015076,0.18488717079162598,0,-0.3811594843864441,0.8865712881088257,0.27898865938186646,1],[7,-0.03442925587296486,0.15010754764080048,0.9880701303482056,0,-0.9437382817268372,-0.3302404284477234,0.017285587266087532,0,0.32889533042907715,-0.9318845272064209,0.15303222835063934,0,-0.4143601059913635,0.8395684361457825,0.30875012278556824,1],[7,-0.10604914277791977,-0.07871338725090027,0.9912403225898743,0,-0.9927675127983093,-0.04802781715989113,-0.11002635955810547,0,0.056267671287059784,-0.9957395792007446,-0.07305078953504562,0,-0.17825061082839966,0.9042502641677856,0.5012291073799133,1],[7,-0.03845415264368057,0.08212536573410034,0.9958798289299011,0,-0.9793938398361206,-0.2008380889892578,-0.021255427971482277,0,0.19826500117778778,-0.9761759042739868,0.08815613389015198,0,-0.2775568962097168,0.9182950258255005,0.36214447021484375,1],[7,-0.10195357352495193,0.28008994460105896,0.9545444250106812,0,-0.9816405773162842,-0.1838199943304062,-0.05090973898768425,0,0.16120509803295135,-0.9422096610069275,0.29368889331817627,0,-0.27258092164993286,0.9595608711242676,0.1558195799589157,1],[7,-0.06454554945230484,0.20208583772182465,0.977238655090332,0,-0.9792302846908569,-0.20144009590148926,-0.02302073873579502,0,0.19220289587974548,-0.9584272503852844,0.21089068055152893,0,-0.28343522548675537,0.9246554374694824,0.2418944090604782,1],[7,-0.9977461695671082,0.06713005900382996,-0.00006506893987534568,0,0.003613819368183613,0.05274364724755287,-0.9986070394515991,0,-0.06703286617994308,-0.9963493347167969,-0.052867546677589417,0,0.16361305117607117,1.0098053216934204,0.0094834603369236,1],[7,-0.9978767037391663,0.06502509862184525,0.004233784507960081,0,0.004120172932744026,0.127803236246109,-0.9917964339256287,0,-0.06503251194953918,-0.9896658658981323,-0.12780019640922546,0,0.16249611973762512,0.5603004097938538,0.051925502717494965,1],[7,-1.000000238418579,-0.000367972650565207,0.0017882728716358542,0,-0.0008099545957520604,-0.7884090542793274,-0.6151556968688965,0,0.0016362450551241636,-0.6151573657989502,0.7884057760238647,0,0.15455184876918793,0.106975257396698,-0.07768543809652328,1],[7,-0.9983721375465393,0.05693897604942322,0.0037352070212364197,0,-0.05689087137579918,-0.9983154535293579,0.011867446824908257,0,0.004404615610837936,0.011635673232376575,0.9999228715896606,0,0.14934886991977692,-0.09578131139278412,-0.03002976067364216,1],[7,0.0015970247332006693,-0.0005565118626691401,-1.0000004768371582,0,-0.00019815299310721457,-1.0000051259994507,0.0005561942816711962,0,-0.9999991059303284,0.0001972653844859451,-0.0015971370739862323,0,0.03116394579410553,-0.1697390079498291,0.15955239534378052,1],[7,-0.9977434277534485,-0.06712996959686279,0.00007571587775601074,0,-0.003624392906203866,0.052742596715688705,-0.9985995888710022,0,0.06703204661607742,-0.996349036693573,-0.05286683514714241,0,-0.163612499833107,1.0098048448562622,0.00948409829288721,1],[7,-0.9978739023208618,-0.06502532958984375,-0.004222112707793713,0,-0.004131999798119068,0.12780679762363434,-0.9917885065078735,0,0.06503107398748398,-0.989665150642395,-0.12780362367630005,0,-0.16249555349349976,0.5603000521659851,0.05192863196134567,1],[7,-0.9999977350234985,0.00038235244574025273,-0.0017772389110177755,0,0.0007918209885247052,-0.788408100605011,-0.6151506900787354,0,-0.0016363956965506077,-0.6151506304740906,0.7884071469306946,0,-0.1545512080192566,0.1069779321551323,-0.07768405228853226,1],[7,-0.9983676671981812,-0.05696716904640198,-0.003933808766305447,0,0.05691694840788841,-0.998306393623352,0.011890002526342869,0,-0.004604491405189037,0.01164668146520853,0.9999215602874756,0,-0.14933909475803375,-0.09578502178192139,-0.030060240998864174,1],[7,0.0016161721432581544,0.0005732033750973642,0.9999978542327881,0,0.00020552794740069658,-0.9999980926513672,0.000572872522752732,0,0.9999986886978149,0.0002046014415100217,-0.0016162885585799813,0,-0.031162172555923462,-0.16973617672920227,0.15955786406993866,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[5,".bin",3977657886,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":95616,"length":24888,"count":6222,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":95616,"count":1328,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,10,11,57,58,59,62,63,64]]},"minPosition",8,[1,-0.20753003656864166,-0.15004073083400726,0.1109890565276146],"maxPosition",8,[1,0.20753133296966553,0.10375142842531204,1.1598856449127197]]],-1],0,0,[],[],[]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0.405},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,7,4],[52,53,0]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.065,"metallic":0},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,7,4],[54,55,0]],[[{"name":"footer-bg1","rect":{"x":2,"y":3,"width":3438,"height":1702},"offset":{"x":0,"y":-1.5},"originalSize":{"width":3442,"height":1705},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[56]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[3,7,4],[57,58,0]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[3,4],[59,0]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[3,4],[60,0]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[3,4],[61,0]],[[[8,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0,"metallic":0},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[3,4],[62,0]]]]
